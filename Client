#include <windows.h>
#include <iostream>
#include <time.h>

#pragma comment(lib,"ws2_32.lib")

using namespace std;

int FHash(int V)
{
	V=(V*13-21)%100;
	
	return V;
}
void cls()
{
	system("cls");
	cout<<"Status: Connected\n";
}

int main()
{
	int connectErr,		//	под ошибки при коннекте к серверу
		IntPWD=0,		//	переводим PWD в числовое значение
		i,
		len,			//	длина PWD
		NumRand,		//	для Rand число которое пришлет сервер
		err=0;
	char buf[1024],
		login[32],
		pwd[32];


	WSADATA version;
	DWORD startErr = WSAStartup(0x0202, &version);
	if (startErr)
	{
		cerr << "Windows socket library isn't version 2.2";
		return 1;
	}

	SOCKET client;

	client = socket(AF_INET, SOCK_STREAM, 0);

	struct sockaddr_in address_server;
	
	address_server.sin_family = AF_INET;
	address_server.sin_addr.S_un.S_addr = htonl(INADDR_LOOPBACK);
	address_server.sin_port = htons(1024);

	connectErr = connect(client, (struct sockaddr *) &address_server, sizeof(sockaddr));

	if (connectErr == SOCKET_ERROR)
		return 2;

	memcpy(buf, "hello", 8);
	send(client, buf, 7, 0);
	
	cout<<"\nServer response waitting...\n";
	memset(buf, 0, 1024);
	recv(client, buf, 1024, 0);
	cout<<"\nServer response: "<<buf;
	cout<<"\n\n\n";
	system("pause");
	cls();

	cout<<"\n Login: ";
	cin.getline(login,32);
	memcpy(buf, login, 8);
	send(client, buf, 7, 0);
		
	memset(buf, 0, 1024);
	recv(client, buf, 1024, 0);
	if (!_strnicmp(buf, "error login", 6))
	{
		cout<<"\nServer response: "<<buf;
		cout<<"\n\n\n";
		return 3;
	}

	cout<<"\n Enter pwd: ";
	cin.getline(pwd,32);

	NumRand=atoi(buf);
	len=strlen(pwd);
	for(i=0;i<len;i++)
		IntPWD+=int(pwd[i]);
	IntPWD=FHash(FHash(IntPWD)+NumRand);
	itoa (IntPWD,buf,10);
	send(client, buf, 7, 0);

	cout<<"\nServer response waitting...\n";
	memset(buf, 0, 1024);
	recv(client, buf, 1024, 0);
	if (!_strnicmp(buf, "error pwd", 6))
	{
		cout<<"\nServer response: "<<buf;
		cout<<"\n\n\n";
		return 4;
	}
	cout<<"\nServer response: "<<buf;
	cout<<"\n\n\n";
	system("pause");
	cls();

	while (!err)
	{
		cls();
		cout<<"\n Enter command for server: \n";
		cin.getline(buf, 100);

		send(client, buf, 7, 0);
		
		memset(buf, 0, 1024);
		recv(client, buf, 1024, 0);
		cout<<"\nServer response = "<<buf;
		
		if(!strcmp(buf, "Error command"))
			err = 1;
		
		cout<<"\n\n\n";
		system("pause");
		system("cls");

		if (!strcmp(buf, "bye"))
			err = 1;
	}

	closesocket(client);

	WSACleanup();
	return 0;
}
 
